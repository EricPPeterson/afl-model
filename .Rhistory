qb_epa_season <- nfl_close_game %>%
group_by(passer_player_id, passer_player_name, season) %>%
mutate(qb_sum_epa = sum(qb_epa)) %>%
select(c(passer_player_id, passer_player_name, season, posteam, qb_sum_epa)) %>%
filter(is.na(passer_player_name) == F) %>%
distinct()
################################################################################################################
#find EPA per drop back by season by QB
################################################################################################################
qb_plays_season <- nfl_close_game %>%
group_by(passer_player_id, season) %>%
filter(pass == 1) %>%
mutate(n_passes = n()) %>%
select(c(passer_player_id, passer_player_name, posteam, season, n_passes)) %>%
filter(is.na(passer_player_name) == F) %>%
distinct()
qb_epa_season <- left_join(qb_epa_season, qb_plays_season, by = c('season', 'posteam', 'passer_player_id','passer_player_name'),
relationship = 'many-to-many') %>% filter(n_passes > 10)
qb_epa_season <- qb_epa_season %>% filter_all(~ !is.na(.))
qb_epa_season <- qb_epa_season %>% mutate(epa_play = qb_sum_epa / n_passes)
#################################################################################################################
#find EPA per game by team
#################################################################################################################
off_efficiency_game <- nfl_close_game %>% group_by(game_id, posteam) %>%
summarise(game_epa = sum(epa),
avg_cpoe = mean(cpoe),
sum_cpoe = sum(cpoe)) %>%
select(game_id, posteam, game_epa)
off_efficiency_game <- off_efficiency_game %>% filter_all(~ !is.na(.))
################################################################################################################
#find pass EPA per game by team
################################################################################################################
pass_epa_game <- nfl_close_game %>%
filter(pass == 1) %>%
group_by(game_id, posteam) %>%
summarise(pass_epa_game = sum(epa),
n_pass = n(),
pass_epa_dropback = pass_epa_game / n_pass,
succ_pass_pct = sum(success) / n_pass) %>%
select(game_id, posteam, n_pass, pass_epa_game, pass_epa_dropback, succ_pass_pct) %>%
filter_all(~!is.na(.))
################################################################################################################
#find run EPA per game by team
################################################################################################################
run_epa_game <- nfl_close_game %>%
group_by(game_id, posteam) %>%
filter(pass == 0) %>%
summarise(run_epa_game = sum(epa),
n_rush = n(),
run_epa_rush = run_epa_game / n_rush,
succ_pct_run = sum(success) / n_rush) %>%
select(game_id, posteam, run_epa_game, n_rush, run_epa_rush, succ_pct_run) %>%
filter_all(~!is.na(.))
###############################################################################################################
#total offense EPA per game by team
#join pass + run EPA into single total EPA df
###############################################################################################################
off_epa_game <- left_join(pass_epa_game, run_epa_game, by = c('game_id', 'posteam'))
off_epa_game$n_plays <- off_epa_game$n_pass + off_epa_game$n_rush
#separate the game ID column to see who is home and away team
off_epa_game <- off_epa_game %>% separate(game_id, into = c('year', 'week', 'away_team', 'home_team'),
sep = '_', remove = FALSE)
###############################################################################################################
#points scored in game
###############################################################################################################
points_gm <- nfl_pbp %>%
group_by(game_id, posteam) %>%
summarise(home_final = max(home_score),
away_final = max(away_score),
total_tds = sum(touchdown, na.rm = TRUE),
total_fgs_att = sum(field_goal_attempt, na.rm = TRUE),
total_pat = sum(extra_point_attempt, na.rm = TRUE),
total_potential_pts = (6*total_tds) + (3*total_fgs_att) + total_pat) %>%
mutate(total_score = home_final + away_final,
pt_diff = home_final - away_final)
points_gm$home_team <- lookup(points_gm$game_id, nfl_pbp$game_id, nfl_pbp$home_team)
points_gm$away_team <- lookup(points_gm$game_id, nfl_pbp$game_id, nfl_pbp$away_team)
points_gm <- points_gm %>%
filter(is.na(posteam) == FALSE) %>%
distinct()
##############################################################################################################
#correct team names
##############################################################################################################
off_epa_game$home_team <- ifelse(off_epa_game$home_team == 'OAK', 'LV', off_epa_game$home_team)
off_epa_game$away_team <- ifelse(off_epa_game$away_team == 'OAK', 'LV', off_epa_game$away_team)
off_epa_game$home_team <- ifelse(off_epa_game$home_team == 'SD', 'LAC', off_epa_game$home_team)
off_epa_game$away_team <- ifelse(off_epa_game$away_team == 'SD', 'LAC', off_epa_game$away_team)
##############################################################################################################
#join offense data with pts data
##############################################################################################################
off_epa_game <- left_join(off_epa_game, points_gm, by = c('game_id', 'posteam', 'home_team', 'away_team'))
off_epa_game$poss_score <- ifelse(off_epa_game$posteam == off_epa_game$home_team,off_epa_game$home_final,off_epa_game$away_final)
#check NAs
which(is.na(off_epa_game), arr.ind = TRUE)
##################################################################################################################
#add to basic EPA stats
##################################################################################################################
cpoe_stats <- nfl_close_game %>%
filter(is.na(cpoe) == F) %>%
group_by(game_id, posteam) %>%
summarise(avg_cpoe = mean(cpoe),
total_cpoe = sum(cpoe))
offensive_efficiency <- left_join(off_epa_game, cpoe_stats, by = c('game_id', 'posteam'), relationship = 'many-to-many') %>%
distinct()
#################################################################################################################
#graphs of stats
#################################################################################################################
library(ggeasy)
ggplot(offensive_efficiency, aes(x = pass_epa_dropback)) + geom_histogram(binwidth = .01) +
xlim(-2,2) + ggtitle('Pass EPA Per Dropback') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = pass_epa_game)) + geom_histogram(binwidth = .25) +
xlim(-40,40) + ggtitle('Pass EPA Per Game') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = run_epa_rush)) + geom_histogram(binwidth = .01) +
xlim(-1,1) + ggtitle('Rush EPA Per Snap') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = run_epa_game)) + geom_histogram(binwidth = .2) +
xlim(-25,25) + ggtitle('Run EPA Per Game') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = succ_pass_pct)) + geom_histogram(binwidth = .01) +
xlim(0,1) + ggtitle('Success Rate Pass') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = succ_pct_run)) + geom_histogram(binwidth = .01) +
xlim(0,1) + ggtitle('Success Rate Run') + ggeasy::easy_center_title()
#################################################################################################################
#efficiency by down
#################################################################################################################
#down efficiency function
down_efficiency <- function(df,dwn, pass_run){
df2 <- df %>%
group_by(game_id, posteam) %>%
filter(down == dwn & play_type == pass_run) %>%
summarise(sum_epa_play_type = sum(epa),
total_success = sum(success),
n_play = n(),
epa_per_play = sum_epa_play_type / n_play,
succ_rate_play = total_success / n_play)
nm <- paste0(pass_run,'_', dwn)
df2 <- df2 %>% rename_all(~ paste(., nm, sep = "_"))
colnames(df2)[1:2] <- c('game_id', 'posteam')
return(df2)
}
first_down_off_pass <- down_efficiency(nfl_close_game,1,'pass')
first_down_off_rush <- down_efficiency(nfl_close_game,1,'run')
second_down_off_pass <- down_efficiency(nfl_close_game,2,'pass')
second_down_off_rush <- down_efficiency(nfl_close_game,2,'run')
third_down_off_pass <- down_efficiency(nfl_close_game,3,'pass')
third_down_off_rush <- down_efficiency(nfl_close_game,3,'run')
list_df <- list(first_down_off_pass, first_down_off_rush, second_down_off_pass, second_down_off_rush)
all_down_eff <- list_df %>% reduce(inner_join, by = c('game_id','posteam'))
#################################################################################################################
#combine all efficiency data
#################################################################################################################
total_offensive_efficiency <- left_join(offensive_efficiency, all_down_eff, by = c('game_id', 'posteam'))
total_offensive_efficiency <- total_offensive_efficiency %>%
mutate(pass_rate = n_pass/n_plays,
run_rate = 1-pass_rate,
pass_rate_first = (n_play_pass_1 / (n_play_pass_1 + n_play_run_1)),
pass_rate_second = (n_play_pass_2 / (n_play_pass_2 + n_play_run_2)))
#################################################################################################################
#gbm model on off eff on actual points scored
#################################################################################################################
total_offensive_efficiency_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:23))
total_offensive_efficiency_model$random <- runif(n = nrow(total_offensive_efficiency_model))
off_gbm_model_train <- total_offensive_efficiency_model %>% filter(random <= 0.80) %>%
select(-random)
off_gbm_model_test <- total_offensive_efficiency_model %>% filter(random > 0.80)
off_gbm_model_true <- off_gbm_model_test %>% select(poss_score)
off_gbm_model_true <- sapply(off_gbm_model_true[,1], as.numeric)
off_gbm_model_test <- off_gbm_model_test %>% select(-c(poss_score, random))
#train GBM model
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
library(caret)
total_offensive_efficiency_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:23))
total_offensive_efficiency_model$random <- runif(n = nrow(total_offensive_efficiency_model))
off_gbm_model_train <- total_offensive_efficiency_model %>% filter(random <= 0.80) %>%
select(-random)
off_gbm_model_test <- total_offensive_efficiency_model %>% filter(random > 0.80)
off_gbm_model_true <- off_gbm_model_test %>% select(poss_score)
off_gbm_model_true <- sapply(off_gbm_model_true[,1], as.numeric)
off_gbm_model_test <- off_gbm_model_test %>% select(-c(poss_score, random))
#train GBM model
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
gbm_model_pts <- train(poss_score~ ., data = off_gbm_model_train,
method = 'gbm',
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbm_model_pts$bestTune
#predict shots per game
gbm_test_pts <- off_gbm_model_true
gbm_preds_pts <- predict(gbm_model_pts, newdata = off_gbm_model_test)
root_error_gbm_pts <- sqrt((sum(gbm_test_pts-gbm_preds_pts)^2)/length(gbm_preds_pts))
cat('RMSE on testing data: ', round(root_error_gbm_pts, 4), ' pts_per_game',  sep='')
###################################################################################################
#train RF model on offense eff
###################################################################################################
control <- trainControl(method="repeatedcv", number=5, repeats=3, search="grid")
set.seed(50)
tunegrid <- expand.grid(.mtry=c(13))
metric <- 'RMSE'
#check for NANs
which(is.na(off_gbm_model_train))
colnames(off_gbm_model_train)[colSums(is.na(off_gbm_model_train)) > 0]
#remove 3 rows of NAs
off_gbm_model_train <- off_gbm_model_train %>% na.omit()
#run RF model
rf_gridsearch_pts <- train(poss_score~., data = off_gbm_model_train, method = "rf", metric = metric, tuneGrid = tunegrid,
trControl = control)
#predict values
y_rf_pts <- predict(object = rf_gridsearch_pts, newdata = off_gbm_model_test)
#check RMSE
root_error_pts <- sqrt((sum(y_rf_pts - off_gbm_model_true)^2)/length(y_rf_pts))
cat('RMSE on testing data: ', round(root_error_pts, 4), ' pts_per_game',  sep='')
#predict values
y_rf_pts <- predict(object = rf_gridsearch_pts, newdata = off_gbm_model_test)
#check RMSE
root_error_pts <- sqrt((sum(y_rf_pts - off_gbm_model_true)^2)/length(y_rf_pts))
cat('RMSE on testing data: ', round(root_error_pts, 4), ' pts_per_game',  sep='')
######################################################################################################
#train xgboost model total offense
#####################################################################################################
set.seed(50)
# Customzing the tuning grid
gbmGrid <-  expand.grid(max_depth = c(3, 5, 7),
nrounds = (1:10)*50,    # number of trees
# default values below
eta = 0.3,
gamma = 0,
subsample = 1,
min_child_weight = 1,
colsample_bytree = 0.6)
# specifying the CV technique which will be passed into the train() function later and number parameter is the "k" in K-fold cross validation
train_control = trainControl(method = "cv", number = 5, search = "grid")
# training a XGboost Regression tree model while tuning parameters
xboost_model_pts <- train(poss_score~., data = off_gbm_model_train, method = "xgbTree", trControl = train_control, tuneGrid = gbmGrid)
#summarize results
print(xboost_model_pts)
#make preds xgboost
xboost_test_pts <- off_gbm_model_test
pred_xboost_pts <- predict(xboost_model_pts, xboost_test_pts)
#check RMSE
root_error_xboost_pts <- sqrt((sum(pred_xboost_pts - off_gbm_model_true)^2)/length(pred_xboost_pts))
cat('RMSE on testing data: ', round(root_error_xboost_pts, 4), ' pts per game',  sep='')
#################################################################################################################
#ensemble model
#################################################################################################################
test_true <- off_gbm_model_train %>% select(poss_score)
xboost_model <- predict(xboost_model_pts, off_gbm_model_train[,-7])
rf_model <- predict(rf_gridsearch_pts, off_gbm_model_train[,-7])
gbm_model <- predict(gbm_model_pts, off_gbm_model_train[,-7])
off_ensemble_df <- cbind(test_true, xboost_model, rf_model, gbm_model)
nms <- colnames(off_ensemble_df)
lm_off_ensemble <- lm(poss_score~., data = off_ensemble_df)
#preds from linear model
test_ensemble_df <- data.frame(cbind(pred_xboost_pts, y_rf_pts, gbm_preds_pts))
colnames(test_ensemble_df) <- nms[2:4]
off_ensemble_preds <- predict(lm_off_ensemble, test_ensemble_df)
#check RMSE
ensemble_RMSE <- sqrt((sum(off_ensemble_preds - off_gbm_model_true)^2)/length(off_ensemble_preds))
cat('RMSE on testing data: ', round(ensemble_RMSE, 4), ' pts per game',  sep='')
#################################################################################################################
#build models off of total points possible
#################################################################################################################
total_potential_points_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:20,22:24))
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_points_model,
method = 'gbm',
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
#################################################################################################################
#build models off of total points possible
#################################################################################################################
total_potential_points_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:20,22:24))
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_points_model,
method = 'gbm',
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbmGrid <-  expand.grid(max_depth = c(3, 5, 7),
nrounds = (1:10)*50,    # number of trees
# default values below
eta = 0.3,
gamma = 0,
subsample = 1,
min_child_weight = 1,
colsample_bytree = 0.6)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_points_model,
method = 'gbm',
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
train_control = trainControl(method = "cv", number = 5, search = "grid")
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_points_model,
method = 'gbm',
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_points_model,
method = 'gbm',
trControl = fitControl,
verbose = FALSE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_points_model,
method = 'gbm',
trControl = fitControl,
verbose = TRUE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbm_potential_pts$bestTune
#predict shots per game
gbm_test_potential <- off_gbm_model_true
#make preds
gbm_preds_potential <- predict(gbm_potential_pts, newdata = off_gbm_model_test)
#check RMSE
root_error_gbm_pts <- sqrt((sum(gbm_preds_potential - )^2)/length(gbm_preds_potential))
View(off_gbm_model_test)
View(total_offensive_efficiency_model)
View(total_offensive_efficiency)
total_potential_points_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:20,22:24))
total_potential_points_model$random <- runif(n = nrow(total_potential_points_model))
total_potential_test <- total_potential_points_model %>% filter(random <= 0.80)
total_potential_train <- total_potential_points_model %>% filter(random > 0.80)
total_potential_train <- total_potential_test %>% select(-random)
total_potential_test <- total_potential_test %>% select(-random)
#################################################################################################################
#GBM model
#################################################################################################################
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_test,
method = 'gbm',
trControl = fitControl,
verbose = TRUE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbm_potential_pts$bestTune
View(total_potential_points_model)
total_potential_points_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:20,22:24))
total_potential_points_model$random <- runif(n = nrow(total_potential_points_model))
total_potential_test <- total_potential_points_model %>% filter(random <= 0.80)
total_potential_train <- total_potential_points_model %>% filter(random > 0.80)
total_potential_train <- total_potential_test %>% select(-random)
total_potential_test <- total_potential_test %>% select(-c(random,total_potential_pts))
#################################################################################################################
#GBM model
#################################################################################################################
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_test,
method = 'gbm',
trControl = fitControl,
verbose = TRUE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
est
#################################################################################################################
#GBM model
#################################################################################################################
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_train,
method = 'gbm',
trControl = fitControl,
verbose = TRUE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbm_potential_pts$bestTune
gbm_preds_potential <- predict(gbm_potential_pts, newdata = total_potential_test)
#################################################################################################################
#build models off of total points possible
#################################################################################################################
total_potential_points_model <- total_offensive_efficiency %>% ungroup() %>%
select(-c(1:7,12,15:20,22:24))
total_potential_points_model$random <- runif(n = nrow(total_potential_points_model))
total_potential_test <- total_potential_points_model %>% filter(random <= 0.80)
total_potential_train <- total_potential_points_model %>% filter(random > 0.80)
total_potential_train <- total_potential_test %>% select(-random)
total_potential_true <- total_potential_test %>% select(total_potential_pts)
total_potential_test <- total_potential_test %>% select(-c(random,total_potential_pts))
#################################################################################################################
#GBM model
#################################################################################################################
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
gbmGrid <-  expand.grid(interaction.depth = c(1),
n.trees = (10)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
gbm_potential_pts <- train(total_potential_pts~ ., data = total_potential_train,
method = 'gbm',
trControl = fitControl,
verbose = TRUE,
tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE',
na.action = na.omit)
gbm_potential_pts$bestTune
#n.trees interaction.depth shrinkage n.minobsinnode
#1     500                 1       0.1             20
#make preds
gbm_preds_potential <- predict(gbm_potential_pts, newdata = total_potential_test)
#check RMSE
root_error_gbm_pts <- sqrt((sum(gbm_preds_potential - )^2)/length(gbm_preds_potential))
root_error_gbm_pts <- sqrt((sum(gbm_preds_potential - total_potential_true)^2)/length(gbm_preds_potential))
cat('RMSE on testing data: ', round(root_error_gbm_pts, 4), ' pts_per_game',  sep='')
#########################################################################################################
#install required libraries
#########################################################################################################
setwd("/Users/ericp/OneDrive/Documents/GitHub/afl-model")
library(fitzRoy)
library(dplyr)
library(lookup)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(lookup)
library(bayestestR)
library(xgboost)
library(gbm)
library(lubridate)
library(jsonlite)
library(tidyr)
####################################################################################################
#ideas for 2024
####################################################################################################
#boost / weight stats by position
#player level data to adjust for injuries
#determine lambda 3 for bivariate model correlation
#weight recent performance over past?
#age curve for teams.
#################################################################################################################
#Odds API
#################################################################################################################
theODDS_base <- 'https://api.the-odds-api.com/v4/sports/'
theODDS_sport  <- 'aussierules_afl/'
theODDS_key <- Sys.getenv('theODDS_key')
theODDS_region <- 'regions=au&'
#theODDS_markets <- '&markets=spreads,h2h,totals&oddsFormat=decimal&'
start_date <- as.Date('2023-03-10')
theODDS_date <- paste0('date=',start_date,'T00:00:00Z')
theODDS_base <- 'https://api.the-odds-api.com/v4/sports/'
theODDS_sport  <- 'aussierules_afl/'
theODDS_key <- Sys.getenv('theODDS_key')
Sys.setenv(API_KEY = '?key=GE5SPM4SQF4UBGD63ZGEMU4KJ')
