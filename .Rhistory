df$poss_score[row] = df$home_final[row]
} else {
df$poss_score[row] = df$away_final[row]
}
}
}
if(pos_def == 'defteam') {
df['score_allowed'] <- NA
for(row in 1:nrow(df)){
if(df$defteam[row] == df$home_team[row]){
df$score_allowed[row] = df$home_final[row]
} else {
df$score_allowed[row] = df$away_final[row]
}
}
}
return(df)
}
off_epa_game <- join_pts(off_epa_game, points_gm, 'posteam')
def_epa_game <- join_pts(def_epa_game, points_gm_allowed, 'defteam')
##################################################################################################################
#add to basic EPA stats
##################################################################################################################
cpoe_calc <- function(df, df2, pos_def){
df3 <- df %>%
filter(is.na(cpoe) == F) %>%
group_by(game_id, !!sym(pos_def)) %>%
summarise(avg_cpoe = mean(cpoe),
total_cpoe = sum(cpoe))
out <- left_join(df2, df3, by = c('game_id', pos_def), relationship = 'many-to-many') %>%
distinct()
return(out)
}
offensive_efficiency <- cpoe_calc(nfl_close_game, off_epa_game, 'posteam')
defensive_efficiency <- cpoe_calc(nfl_close_game, def_epa_game, 'defteam')
#################################################################################################################
#graphs of stats
#################################################################################################################
library(ggeasy)
ggplot(offensive_efficiency, aes(x = pass_epa_dropback)) + geom_histogram(binwidth = .01) +
xlim(-2,2) + ggtitle('Pass EPA Per Dropback') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = pass_epa_game)) + geom_histogram(binwidth = .25) +
xlim(-40,40) + ggtitle('Pass EPA Per Game') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = run_epa_rush)) + geom_histogram(binwidth = .01) +
xlim(-1,1) + ggtitle('Rush EPA Per Snap') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = run_epa_game)) + geom_histogram(binwidth = .2) +
xlim(-25,25) + ggtitle('Run EPA Per Game') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = succ_pass_pct)) + geom_histogram(binwidth = .01) +
xlim(0,1) + ggtitle('Success Rate Pass') + ggeasy::easy_center_title()
ggplot(offensive_efficiency, aes(x = succ_pct_run)) + geom_histogram(binwidth = .01) +
xlim(0,1) + ggtitle('Success Rate Run') + ggeasy::easy_center_title()
#################################################################################################################
#efficiency by down
#################################################################################################################
#down efficiency function
#################################################################################################################
down_efficiency <- function(df,dwn, pass_run, pos_def){
df2 <- df %>%
group_by(game_id, !!sym(pos_def)) %>%
filter(down == dwn & play_type == pass_run) %>%
summarise(sum_epa_play_type = sum(epa),
total_success = sum(success),
n_play = n(),
epa_per_play = sum_epa_play_type / n_play,
succ_rate_play = total_success / n_play)
nm <- paste0(pass_run,'_', dwn)
df2 <- df2 %>% rename_all(~ paste(., nm, sep = "_"))
colnames(df2)[1:2] <- c('game_id', pos_def)
return(df2)
}
first_down_off_pass <- down_efficiency(nfl_close_game,1,'pass', 'posteam')
first_down_off_rush <- down_efficiency(nfl_close_game,1,'run', 'posteam')
first_down_def_pass <- down_efficiency(nfl_close_game,1,'pass', 'defteam')
first_down_def_rush <- down_efficiency(nfl_close_game,1,'run', 'defteam')
second_down_off_pass <- down_efficiency(nfl_close_game,2,'pass', 'posteam')
second_down_off_rush <- down_efficiency(nfl_close_game,2,'run', 'posteam')
second_down_def_pass <- down_efficiency(nfl_close_game,2,'pass', 'defteam')
second_down_def_rush <- down_efficiency(nfl_close_game,2, 'run', 'defteam')
third_down_off_pass <- down_efficiency(nfl_close_game,3,'pass','posteam')
third_down_off_rush <- down_efficiency(nfl_close_game,3,'run', 'posteam')
third_down_def_pass <- down_efficiency(nfl_close_game,3,'pass', 'defteam')
third_down_def_rush <- down_efficiency(nfl_close_game,3,'run', 'defteam')
list_df <- list(first_down_off_pass, first_down_off_rush, second_down_off_pass, second_down_off_rush)
all_down_eff <- list_df %>% reduce(inner_join, by = c('game_id','posteam'))
list_def_df <- list(first_down_def_pass, first_down_def_rush, second_down_def_pass, second_down_def_rush)
all_down_def <- list_def_df %>% reduce(inner_join, by = c('game_id', 'defteam'))
#################################################################################################################
#combine all efficiency data
#################################################################################################################
combine_eff_data <- function(df,df2, pos_def){
out <- left_join(df, df2, by = c('game_id', pos_def))
out <- out %>%
mutate(pass_rate = n_pass/n_plays,
run_rate = 1-pass_rate,
pass_rate_first = (n_play_pass_1 / (n_play_pass_1 + n_play_run_1)),
pass_rate_second = (n_play_pass_2 / (n_play_pass_2 + n_play_run_2)))
return(out)
}
total_offensive_efficiency <- combine_eff_data(offensive_efficiency, all_down_eff, 'posteam')
total_defensive_efficiency <- combine_eff_data(defensive_efficiency, all_down_def, 'defteam')
#################################################################################################################
#model 2022 offense
#################################################################################################################
nfl_2022 <- load_pbp(2022) %>%
progressr::with_progress()
#2022 data prep to make final 2022 offense numbers
nfl_close_2022 <- data_prep(nfl_2022)
qb_epa_2022 <- qb_epa_calc(nfl_close_2022, 'posteam')
qb_plays_2022 <- qb_plays_calc(nfl_close_2022, qb_epa_2022, 'posteam')
qb_epa_season_2022 <- qb_epa_season_calc(nfl_close_2022, 'posteam')
qb_plays_season_2022 <- qb_plays_season_calc(nfl_close_2022, qb_epa_season_2022, 'posteam')
off_efficiency_game_2022 <- off_efficiency_game_calc(nfl_close_2022, 'posteam')
def_efficiency_game_2022 <- off_efficiency_game_calc(nfl_close_2022, 'defteam')
pass_epa_game_2022 <- pass_epa_game_calc(nfl_close_2022, 'posteam')
pass_epa_game_allowed_2022 <- pass_epa_game_calc(nfl_close_2022, 'defteam')
run_epa_game_2022 <- run_epa_game_calc(nfl_close_2022, 'posteam')
run_epa_game_allowed_2022 <- run_epa_game_calc(nfl_close_2022, 'defteam')
off_epa_game_2022 <- off_epa_game_calc(pass_epa_game_2022, run_epa_game_2022, 'posteam')
def_epa_game_2022 <- off_epa_game_calc(pass_epa_game_allowed_2022, run_epa_game_allowed_2022, 'defteam')
points_gm_2022 <- points_gm_calc(nfl_close_2022, 'posteam')
points_gm_all_2022 <- points_gm_calc(nfl_close_2022, 'defteam')
off_epa_game_2022 <- correct_team_names(off_epa_game_2022)
def_epa_game_2022 <- correct_team_names(def_epa_game_2022)
off_epa_game_2022 <- join_pts(off_epa_game_2022, points_gm_2022, 'posteam')
def_epa_game_2022 <- join_pts(def_epa_game_2022, points_gm_all_2022, 'defteam')
offensive_efficiency_2022 <- cpoe_calc(nfl_close_2022, off_epa_game_2022, 'posteam')
defensive_efficiency_2022 <- cpoe_calc(nfl_close_2022, def_epa_game_2022, 'defteam')
first_down_off_pass_2022 <- down_efficiency(nfl_close_2022,1,'pass', 'posteam')
first_down_def_pass_2022 <- down_efficiency(nfl_close_2022,1, 'pass', 'defteam')
first_down_off_rush_2022 <- down_efficiency(nfl_close_2022,1,'run', 'posteam')
first_down_def_rush_2022 <- down_efficiency(nfl_close_2022,1, 'run', 'defteam')
second_down_off_pass_2022 <- down_efficiency(nfl_close_2022,2,'pass', 'posteam')
second_down_def_pass_2022 <- down_efficiency(nfl_close_2022,2, 'pass', 'defteam')
second_down_off_rush_2022 <- down_efficiency(nfl_close_2022,2,'run', 'posteam')
second_down_def_rush_2022 <- down_efficiency(nfl_close_2022,2,'run', 'defteam')
list_df_2022 <- list(first_down_off_pass_2022, first_down_off_rush_2022,
second_down_off_pass_2022, second_down_off_rush_2022)
list_def_2022 <- list(first_down_def_pass_2022, first_down_def_rush_2022,
second_down_def_pass_2022, second_down_def_rush_2022)
all_down_eff_2022 <- list_df_2022 %>% reduce(inner_join, by = c('game_id','posteam'))
all_down_def_2022 <- list_def_2022 %>% reduce(inner_join, by = c('game_id','defteam'))
total_offensive_efficiency_2022 <- combine_eff_data(offensive_efficiency_2022, all_down_eff_2022, 'posteam')
total_defensive_efficiency_2022 <- combine_eff_data(defensive_efficiency_2022, all_down_def_2022, 'defteam')
#################################################################################################################
#ensemble model on off eff on actual points scored
#################################################################################################################
prep_df <- function(df, cols){
df <- df %>% ungroup() %>%
select(-all_of(cols))
smp_size <- floor(0.80 * nrow(df))
set.seed(5)
train_test <- sample(seq_len(nrow(df)), size = smp_size)
df_train <- df[train_test, ]
df_test <- df[-train_test, ]
return(list(df_train, df_test, df))
}
ensemble_off <- prep_df(total_offensive_efficiency, c(1:7,12,15:23))
ensemble_def <- prep_df(total_defensive_efficiency, c(1:7,12,15:23))
library(h2o)
h2o.init()
ensemble_off_train_h2o <- as.h2o(ensemble_off[[1]])
ensemble_off_test_h2o <- as.h2o(ensemble_off[[2]])
ensemble_def_train_h2o <- as.h2o(ensemble_def[[1]])
ensemble_def_test_h2o <- as.h2o(ensemble_def[[2]])
#train GBM
gbm_model <- function(df, y, x, nfolds, seed){
out <- h2o.gbm(x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
return(out)
}
off_gbm <- gbm_model(ensemble_off_train_h2o,'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_gbm <- gbm_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
#train RF
RF_model <- function(df, y, x, nfolds, seed){
out <- h2o.randomForest(x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
return(out)
}
off_RF <- gbm_model(ensemble_off_train_h2o, 'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_RF <- gbm_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
#train glm
lr_model <- function(df, y, x, nfolds, seed){
out <- h2o.glm(x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5)
return(out)
}
off_lr <- lr_model(ensemble_off_train_h2o, 'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_lr <- lr_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
#train neural net
nn_model <- function(df, y, x, nfolds, seed){
out <- h2o.deeplearning(
x = x,
y = y,
training_frame = df,
nfolds = nfolds,
keep_cross_validation_predictions = TRUE,
seed = 5
)
return(out)
}
off_nn <- nn_model(ensemble_off_train_h2o, 'poss_score',
setdiff(names(ensemble_off_train_h2o), 'poss_score'), 5, 5)
def_nn <- nn_model(ensemble_def_train_h2o, 'score_allowed',
setdiff(names(ensemble_def_train_h2o), 'score_allowed'), 5, 5)
# Train a stacked random forest ensemble using the GBM, RF and LR above
ensemble_model <- function(mod, mod2, mod3, mod4, df, y, x){
out <- h2o.stackedEnsemble(x = x, y = y,
metalearner_algorithm = 'glm',
training_frame = df,
base_models = list(mod, mod2, mod3, mod4))
return(out)
}
off_ensemble_test <- ensemble_model(off_lr, off_RF, off_nn, off_gbm, ensemble_off_train_h2o,
'poss_score', setdiff(names(ensemble_off_train_h2o), 'poss_score'))
def_ensemble_test <- ensemble_model(def_lr, def_RF, def_nn, def_gbm, ensemble_def_train_h2o,
'score_allowed', setdiff(names(ensemble_def_train_h2o),'score_allowed'))
#check performance
mod_performance <- function(model, test_df){
out <- h2o.performance(model, test_df)
return(out)
}
off_gbm_test <- mod_performance(off_gbm, ensemble_off_test_h2o)
def_gbm_test <- mod_performance(def_gbm, ensemble_def_test_h2o)
off_rf_test <- mod_performance(off_RF, ensemble_off_test_h2o)
def_rf_test <- mod_performance(def_RF, ensemble_def_test_h2o)
off_glm_test <- mod_performance(off_lr, ensemble_off_test_h2o)
def_glm_test <- mod_performance(def_lr, ensemble_def_test_h2o)
off_nn_test <- mod_performance(off_nn, ensemble_off_test_h2o)
def_nn_test <- mod_performance(def_nn, ensemble_def_test_h2o)
min(h2o.rmse(off_gbm_test), h2o.rmse(off_rf_test), h2o.rmse(off_glm_test), h2o.rmse(off_nn))
min(h2o.rmse(def_gbm_test), h2o.rmse(def_rf_test), h2o.rmse(def_glm_test), h2o.rmse(def_nn))
off_ensemble_test <- mod_performance(off_ensemble_test, ensemble_off_train_h2o)
def_ensemble_test <- mod_performance(def_ensemble_test, ensemble_def_train_h2o)
h2o.rmse(off_ensemble_test)
h2o.rmse(def_ensemble_test)
################################################################################################################
#error pretty big off of actual points. Issue probably is that points get scored in 7s and 3s. Probably shouln't
#give 3 pts for every field goal. Let's create effective points, where we credit both offenses for moving the ball
#downfield to a certain expected points and to the defenses for how much field position they gave up. Will adjust
#to effective points, then recalc all models. From there we can make through place kicking adjustment to give a full
#view of offense. Calc what points the offense has 'earned' moving into field goal position and then see if the FG
#kicking unit adds points (i.e. makes FGs above expectation) or subtracts points from effective points.
#################################################################################################################
#build models off of effective points
#################################################################################################################
ensemble_eff <- prep_df(total_offensive_efficiency, c(1:7,12,15:20,22:24))
ensemble_def_eff <- prep_df(total_offensive_efficiency, c(1:7,12,15:20,22:24))
ensemble_off_eff_h2o_train <- as.h2o(ensemble_eff[[1]])
ensemble_off_eff_h2o_test <- as.h2o(ensemble_eff[[2]])
ensemble_def_eff_h2o_train <- as.h2o(ensemble_def_eff[[1]])
ensemble_def_eff_h2o_test <- as.h2o(ensemble_def_eff[[2]])
#train GBM
off_eff_gbm <- gbm_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train), 'total_effective_pts'), 5, 5)
def_eff_gbm <- gbm_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train), 'total_effective_pts'), 5, 5)
#train RF
off_eff_rf <- RF_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'),5,5)
def_eff_rf <- RF_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train),'total_effective_pts'),5,5)
#train glm
off_eff_lr <- lr_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'),5,5)
def_eff_lr <- lr_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train),'total_effective_pts'),5,5)
#train neural net
off_eff_nn <- nn_model(ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'),5,5)
def_eff_nn <- nn_model(ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train),'total_effective_pts'),5,5)
# Train a stacked random forest ensemble using the GBM, RF and LR above
off_eff_ensemble <- ensemble_model(off_eff_lr, off_eff_rf, off_eff_nn,
off_eff_gbm, ensemble_off_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_off_eff_h2o_train),'total_effective_pts'))
def_eff_ensemble <- ensemble_model(def_eff_lr, def_eff_rf, def_eff_nn,
def_eff_gbm, ensemble_def_eff_h2o_train, 'total_effective_pts',
setdiff(names(ensemble_def_eff_h2o_train), 'total_effective_pts'))
#check performance
off_gbm_eff_test <- mod_performance(off_eff_gbm, ensemble_off_eff_h2o_test)
def_gbm_eff_test <- mod_performance(def_eff_gbm, ensemble_def_eff_h2o_test)
off_rf_eff_test <- mod_performance(off_eff_rf, ensemble_off_eff_h2o_test)
def_rf_eff_test <- mod_performance(def_eff_rf, ensemble_def_eff_h2o_test)
off_glm_eff_test <- mod_performance(off_eff_lr, ensemble_off_eff_h2o_test)
def_glm_eff_test <- mod_performance(def_eff_lr, ensemble_def_eff_h2o_test)
off_nn_eff_test <- mod_performance(off_eff_nn, ensemble_off_eff_h2o_test)
def_nn_eff_test <- mod_performance(def_eff_nn, ensemble_def_eff_h2o_test)
min(h2o.rmse(off_gbm_eff_test), h2o.rmse(off_rf_eff_test), h2o.rmse(off_glm_eff_test), h2o.rmse(off_nn_eff_test))
min(h2o.rmse(def_gbm_eff_test), h2o.rmse(def_rf_eff_test), h2o.rmse(def_glm_eff_test), h2o.rmse(def_nn_eff_test))
off_ensemble_eff_test <- mod_performance(off_eff_ensemble, ensemble_off_eff_h2o_test)
def_ensemble_eff_test <- mod_performance(def_eff_ensemble, ensemble_def_eff_h2o_test)
h2o.rmse(off_ensemble_eff_test)
h2o.rmse(def_ensemble_eff_test)
###################################################################################################################
#run models on 2022 data
###################################################################################################################
library(caret)
final_off <- total_offensive_efficiency_2022 %>%
select(1,6,21)
final_def <- total_defensive_efficiency_2022 %>%
select(1,6,21)
ensemble_eff_2022 <- prep_df(total_offensive_efficiency_2022, c(1:7,12,15:20,21:24))
ensemble_def_2022 <- prep_df(total_defensive_efficiency_2022, c(1:7,12,15:20,21:24))
ensemble_off_2022 <- as.h2o(ensemble_eff_2022[[3]])
ensemble_def_2022 <- as.h2o(ensemble_def_2022[[3]])
#set target and predictors
preds_off_2022 <- h2o.predict(off_eff_ensemble, newdata = ensemble_off_2022)
preds_off_df <- as.data.frame(preds_off_2022)
preds_def_2022 <- h2o.predict(def_eff_ensemble, newdata = ensemble_def_2022)
preds_def_df <- as.data.frame(preds_def_2022)
final_off <- cbind(final_off, preds_off_df)
final_def <- cbind(final_def, preds_def_df)
colnames(final_off)[4] <- 'predicted_points'
colnames(final_def)[4] <- 'predicted_points_conceded'
caret::RMSE(final_off$total_effective_pts, final_off$predicted_points)
caret::RMSE(final_def$total_effective_pts, final_def$predicted_points_conceded)
#################################################################################################################
#correct for kicking efficiency
################################################################################################################
nfl_fg_eff <- function(df, pos_def){
df2 <- df %>% filter(is.na(field_goal_result) == FALSE)
df2 <- df2 %>%
mutate(exp_pts = fg_prob * 3)
df2$act_pts <- ifelse(df2$field_goal_result == 'made',3,0)
df2 <- df2 %>%
mutate(added_pts = act_pts - exp_pts)
out <- df2 %>%
group_by(season, !!sym(pos_def)) %>%
summarise(total_added_pts = sum(added_pts),
total_kicks = n(),
kicks_per_game = total_kicks / 17,
avg_kick_exp_pts = mean(exp_pts),
avg_pts_per_kick = mean(act_pts),
add_pts_per_kick = total_added_pts / total_kicks,
add_pts_per_game = total_added_pts / 17
)
return(out)
}
nfl_fg_off_stats <- nfl_fg_eff(nfl_close_2022, 'posteam')
nfl_kickers_2022 <- nfl_close_2022 %>%
filter(field_goal_attempt == 1) %>%
select(c(posteam, kicker_player_name, kicker_player_id)) %>%
filter(is.na(kicker_player_id) == FALSE) %>%
distinct()
#################################################################################################################
#adjust offense for place kicking
#################################################################################################################
final_off$kick_pts_add <- lookup(final_off$posteam, nfl_fg_off_stats$posteam, nfl_fg_off_stats$add_pts_per_game)
final_off <- final_off %>%
mutate(adj_pts = total_effective_pts + kick_pts_add)
################################################################################################################
#schedule adjustment
################################################################################################################
median_run_epa <- nfl_close_2022 %>%
filter(play_type == 'run') %>%
group_by(week) %>%
summarise(median_run_epa = median(epa))
median_pass_epa <- nfl_close_2022 %>%
filter(play_type == 'pass') %>%
group_by(week) %>%
summarise(median_pass_epa = median(epa))
med_run_plays <- nfl_close_2022 %>%
filter(play_type == 'run') %>%
group_by(posteam, week) %>%
summarise(run_plays = n()) %>%
group_by(week) %>%
summarise(med_run_plays = median(run_plays))
med_pass_plays <- nfl_close_2022 %>%
filter(play_type == 'pass') %>%
group_by(posteam, week) %>%
summarise(pass_plays = n()) %>%
group_by(week) %>%
summarise(med_pass_plays = median(pass_plays))
teams <- nfl_close_2022 %>%
group_by(posteam) %>%
summarise(plays = n()) %>%
select(c(posteam)) %>%
filter(is.na(posteam) == FALSE)
for(i in 1:nrow(teams)){
next_team <- as.list(teams)
sched_adj <- nfl_close_2022 %>%
filter(defteam == next_team[[1]][i])
run_epa <- sched_adj %>% filter(play_type == 'run') %>%
group_by(week) %>%
summarise(epa_run = median(epa) / n())
pass_epa <- sched_adj %>% filter(play_type == 'pass') %>%
group_by(week) %>%
summarise(epa_pass = median(epa) / n())
epa_list <- list(run_epa, pass_epa, median_run_epa, median_pass_epa, med_run_plays, med_pass_plays)
epa_data <- epa_list %>% reduce(left_join, by = 'week')
epa_data <- epa_data %>%
mutate(run_pts = (epa_run - median_run_epa) * med_run_plays,
pass_pts = (epa_pass - median_pass_epa) * med_pass_plays)
}
#################################################################################################################
#group by teams
#################################################################################################################
#################################################################################################################
#need to add game for both Cincy and Buffalo or weighting won't work on average. Add an average offensive and def
#game for both teams
######################################################################################D##########################
library(FRAPO)
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points),
mean_kick_add = mean(kick_pts_add),
mean_adj_pts = mean(adj_pts)) %>%
dplyr::filter(posteam == 'BUF')
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(defteam == 'BUF')
cin_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points),
mean_kick_add = mean(kick_pts_add),
mean_adj_pts = mean(adj_pts)) %>%
dplyr::filter(posteam == 'CIN')
cin_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(defteam == 'CIN')
off_add <- rbind(buff_off, cin_off)
def_add <- rbind(buff_def, cin_def)
off_add$game_id <- '2022_17_BUF_CIN'
def_add$game_id <- '2022_17_BUF_CIN'
colnames(off_add) <- c('posteam', 'total_effective_pts', 'predicted_points','kick_pts_add','adj_pts','game_id')
colnames(def_add) <- c('defteam', 'total_effective_pts', 'predicted_points_conceded', 'game_id')
common_cols <- intersect(colnames(off_add), colnames(final_off))
final_off <- rbind(
subset(final_off, select = common_cols),
subset(off_add, select = common_cols)
)
common_cols <- intersect(colnames(def_add), colnames(final_def))
final_def <- rbind(
subset(final_def, select = common_cols),
subset(def_add, select = common_cols)
)
#################################################################################################################
#count ot make sure every team has 17 games
#################################################################################################################
game_counts <- final_off %>%
dplyr::group_by(posteam) %>%
dplyr::summarise(total_games = n())
wts <- c(17:1)
weighted_avg <- function(df, pos_def, col){
out <- df %>%
group_by(!!sym(pos_def)) %>%
summarise(wt_avg_pts = weighted.mean(!!sym(col), wts, na.rm = TRUE))
return(out)
}
weighted_offense <- weighted_avg(final_off, 'posteam','adj_pts')
weighted_defense <- weighted_avg(final_def, 'defteam', 'predicted_points_conceded')
#################################################################################################################
#team rankings
#################################################################################################################
power_rank <- weighted_offense %>% select(posteam)
colnames(power_rank) <- 'team'
power_rank$wt_offense <- lookup(power_rank$team, weighted_offense$posteam, weighted_offense$wt_avg_pts)
power_rank$wt_defense <- lookup(power_rank$team, weighted_defense$defteam, weighted_defense$wt_avg_pts)
power_rank <- power_rank %>%
mutate(pts_vs_avg = wt_offense - wt_defense)
write.csv(power_rank, 'power_rank.csv', row.names = FALSE)
#########################################################################################################
#install required libraries
#########################################################################################################
setwd("/Users/ericp/OneDrive/Documents/GitHub/afl-model")
library(fitzRoy)
library(dplyr)
library(lookup)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(lookup)
library(bayestestR)
library(xgboost)
library(gbm)
library(lubridate)
library(jsonlite)
library(tidyr)
####################################################################################################
#ideas for 2024
####################################################################################################
#boost / weight stats by position
#player level data to adjust for injuries
#determine lambda 3 for bivariate model correlation
#weight recent performance over past?
#age curve for teams.
#add variance to pts-per-shot by making that a RV.
