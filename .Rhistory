tuneGrid = gbmGrid,
## Specify which metric to optimize
metric = 'RMSE')
gbm_model$bestTune
#> gbm_model$bestTune
#n.trees interaction.depth shrinkage n.minobsinnode
#1     500                 1       0.1             20
#predict shots per game
gbm_test <- rf_test[,-1]
gbm_preds <- predict(gbm_model, newdata = gbm_test)
#check RMSE
root_error_gbm <- sqrt((sum(gbm_preds-rf_test$game_shots)^2)/length(gbm_preds))
cat('RMSE on testing data: ', round(root_error_gbm, 4), ' shots',  sep='')
#########################################################################################################
#predict shots xgboost
#########################################################################################################
set.seed(50)
# Customzing the tuning grid
gbmGrid <-  expand.grid(max_depth = c(3, 5, 7),
nrounds = (1:10)*50,    # number of trees
# default values below
eta = 0.3,
gamma = 0,
subsample = 1,
min_child_weight = 1,
colsample_bytree = 0.6)
# specifying the CV technique which will be passed into the train() function later and number parameter is the "k" in K-fold cross validation
train_control = trainControl(method = "cv", number = 5, search = "grid")
# training a XGboost Regression tree model while tuning parameters
xboost_model <- train(game_shots~., data = rf_train, method = "xgbTree", trControl = train_control, tuneGrid = gbmGrid)
#summarize results
print(xboost_model)
#make preds xgboost
xboost_test <- rf_test[,-1]
pred_xboost <- predict(xboost_model, xboost_test)
#check RMSE
root_error_xboost <- sqrt((sum(pred_xboost-rf_test$game_shots)^2)/length(pred_xboost))
cat('RMSE on testing data: ', round(root_error_xboost, 4), ' shots',  sep='')
##########################################################################################################
#ensemble model
##########################################################################################################
train_preds_rf <- data.frame(predict(rf_gridsearch, newdata = rf_train[,-1]))
colnames(train_preds_rf) <- 'preds_rf'
train_preds_gbm <- data.frame(predict(gbm_model, newdata = rf_train[,-1]))
colnames(train_preds_gbm) <- 'preds_gbm'
train_preds_xboost <- data.frame(predict(xboost_model, newdata = rf_train[,-1]))
colnames(train_preds_xboost) <- 'preds_xboost'
#lm ensemble
ensemble_df <- bind_cols(rf_train[,1], train_preds_rf, train_preds_gbm, train_preds_xboost)
ensemble_model <- lm(game_shots~., data = ensemble_df)
#ensemble preds
ensemble_test <- bind_cols(y_rf, gbm_preds, pred_xboost)
colnames(ensemble_test) <- c('preds_rf', 'preds_gbm', 'preds_xboost')
ensemble_preds <- predict(ensemble_model, newdata = ensemble_test)
#check RMSE
root_error_ensemble <- sqrt((sum(ensemble_preds-rf_test$game_shots)^2)/length(ensemble_preds))
cat('RMSE on testing data: ', round(root_error_ensemble, 4), ' shots',  sep='')
########################################################################################################
#ensemble performed well#
########################################################################################################
########################################################################################################
#Models to isolate travel, defensive and home field#
########################################################################################################
library(rvest)
library(DAAG)
library(geosphere)
library(tibble)
aus_cities <- data.frame(aulatlong)
aus_cities <- rownames_to_column(aus_cities)
colnames(aus_cities) <- c('City','Lat','Long')
url <- 'https://en.wikipedia.org/wiki/Australian_Football_League'
html <- read_html(url)
#change cities to states to match home ground and home stats dfs.
aus_cities$City <- ifelse(aus_cities$City == 'Adelaide', 'South Australia', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Alice'| aus_cities$City =='Darwin', 'Northern Territories', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Sydney', 'New South Wales', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Melbourne', 'Victoria', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Perth', 'Western Australia', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Brisbane', 'Queensland', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Hobart', 'Tasmania', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Canberra', 'Australian Capital Territory', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Broome', 'Western Australia', aus_cities$City)
aus_cities$City <- ifelse(aus_cities$City == 'Cairns', 'Queensland', aus_cities$City)
#distance function
#distm is the distance function (lat1,lon1,lat2,lon2)
home_ground <- html %>%
html_element("table.wikitable.sortable") %>%
html_table()
home_ground <- home_ground[c(-1,-20),]
home_ground <- home_ground %>% select(-c(2,3,6:12))
colnames(home_ground) <- c('team', 'city', 'home_ground')
home_stats <- fry_stats %>%
group_by(match_id, player_team) %>%
summarise(total_shots = sum(shots_at_goal))
home_stats$season <- lookup(home_stats$match_id, fry_stats$match_id, fry_stats$season)
home_stats$home_team <- lookup(home_stats$match_id, fry_stats$match_id, fry_stats$match_home_team)
home_stats$away_team <- lookup(home_stats$match_id, fry_stats$match_id, fry_stats$match_away_team)
home_stats$venue <- lookup(home_stats$match_id, fry_stats$match_id, fry_stats$venue_name)
home_stats$home_away <- ifelse (home_stats$player_team == home_stats$home_team, 'home', 'away')
home_stats$home_city <- lookup(home_stats$home_team, home_ground$team, home_ground$city)
home_stats$away_city <- lookup(home_stats$away_team, home_ground$team, home_ground$city)
home_stats$away_ground <-lookup(home_stats$away_team, home_ground$team, home_ground$home_ground)
#get rid of ^ in NSW column
home_stats$home_city <- ifelse(home_stats$home_city == 'New South Wales^', 'New South Wales', home_stats$home_city)
home_stats$away_city <- ifelse(home_stats$away_city == 'New South Wales^', 'New South Wales', home_stats$away_city)
#calc travel distance for away teams
home_stats$home_lat <- lookup(home_stats$home_city,aus_cities$City, aus_cities$Lat)
home_stats$home_lon <- lookup(home_stats$home_city,aus_cities$City, aus_cities$Long)
home_stats$away_lat <- lookup(home_stats$away_city,aus_cities$City, aus_cities$Lat)
home_stats$away_lon <- lookup(home_stats$away_city,aus_cities$City, aus_cities$Long)
#away travel
home_stats$travel <- NA
for(i in 1:nrow(home_stats)){
home_stats$travel[i] <- distm(c(home_stats$home_lat[i],home_stats$home_lon[i]),c(home_stats$away_lat[i], home_stats$away_lon[i]),
fun = distHaversine)/1000
}
home_stats$travel <- ifelse(home_stats$home_away == 'home',0, home_stats$travel)
#basic stats
shots_home_away <- home_stats %>% group_by(home_away) %>% summarise(mean_shots = mean(total_shots))
#home team takes approx 1.9 more shots
travel_shots <- home_stats %>% group_by(home_away,travel) %>% summarise(mean_shots = mean(total_shots))
#home team shot diff increases as travel increases
shots_home_away_year <- home_stats %>% group_by(home_away, season) %>% summarise(mean_shots = mean(total_shots))
#more to look at. doesn't look like a trend there.
shots_venue <- home_stats %>% group_by(home_away, venue) %>% summarise(mean_shots = mean(total_shots))
#does look like some venues create greater discrepancies. Also, some venues probably only had very few games there
#so making some crazy looking stats.
#########################################################################################################
#home / away splits
#########################################################################################################
HFA <- home_stats %>% group_by(home_away, venue) %>%
summarise(mean_shots = mean(total_shots),
total_games = n()) %>%
filter(total_games > 9)
HFA <- HFA %>% mutate(overall_mean = 0.5 * (sum(fry_stats$shots_at_goal)/n_distinct(fry_stats$match_id)),
pct_of_mean = mean_shots / overall_mean,
shot_diff = mean_shots - overall_mean)
#########################################################################################################
#effect of travel
#########################################################################################################
travel_effect <- home_stats %>% group_by(travel) %>%
summarise(mean_shots = mean(total_shots),
total_games = n()) %>%
filter(travel > 0)
lm_travel <- lm(mean_shots~travel, data = travel_effect)
summary(lm_travel)
travel_coeff <- lm_travel$coefficients[2]
#########################################################################################################
#defensive adjustment
#########################################################################################################
fry_stats_2021 <- fetch_player_stats_fryzigg(season = 2021)
fry_stats_2021 <- fry_stats_2021 %>% filter(!(match_round %in% c('Semi Finals', 'Preliminary Finals', 'Grand Final', 'Finals Week 1')))
fry_stats_2021$match_round <- is.numeric(fry_stats_2021$match_round)
fry_stats_2021$opposition <- NA
#create a column for who the opposition was in every game
#will allow me to see what teams give up lots of shots
for(i in 1: nrow(fry_stats_2021)) {
if(fry_stats_2021$player_team[i] == fry_stats_2021$match_home_team[i]){
fry_stats_2021$opposition[i] <- fry_stats_2021$match_away_team[i]
} else {
fry_stats_2021$opposition[i] <- fry_stats_2021$match_home_team[i]
}
}
defense_grouped_2021 <- fry_stats_2021 %>% group_by(match_id, opposition) %>%
summarise(game_shots = sum(shots_at_goal),
game_ins = sum(inside_fifties),
game_kicks = sum(kicks),
game_marks = sum(marks),
game_handballs = sum(handballs),
game_eff_disposals = sum(effective_disposals),
game_disposals = sum(disposals),
game_clearances = sum(clearances),
game_FK_for = sum(free_kicks_for),
game_FK_against = sum(free_kicks_against),
game_uncontested = sum(uncontested_possessions),
game_cont_marks = sum(contested_marks),
game_marks_50 = sum(marks_inside_fifty),
game_hitouts = sum(hitouts),
game_tackles = sum(tackles),
game_tack_ins_fifty = sum(tackles_inside_fifty),
game_rebounds = sum(rebounds),
game_cont_possessions = sum(contested_possessions),
)
#check for NANs
which(is.na(defense_grouped_2021))
#none
##########################################################################################################
#ensemble defense correction
##########################################################################################################
def_stats_2021 <- defense_grouped_2021 %>% group_by(opposition) %>%
mutate(mean_game_shots = mean(game_shots)) %>%
select(c(opposition, mean_game_shots))
def_stats_2021$league_mean <- sum(fry_stats_2021$shots_at_goal/n_distinct(fry_stats_2021$match_id))/2
def_stats_2021 <- def_stats_2021 %>%
mutate(def_pct = mean_game_shots / league_mean)
colnames(def_stats_2021)[1] <- 'player_team'
###########################################################################################################
#initial offensive stats from ensemble model
###########################################################################################################
########################################################################################################
#create group stats
########################################################################################################
stats_grouped_2021 <- fry_stats_2021 %>% group_by(match_id, player_team) %>%
summarise(game_shots = sum(shots_at_goal),
game_ins = sum(inside_fifties),
game_kicks = sum(kicks),
game_marks = sum(marks),
game_handballs = sum(handballs),
game_eff_disposals = sum(effective_disposals),
game_disposals = sum(disposals),
game_clearances = sum(clearances),
game_FK_for = sum(free_kicks_for),
game_FK_against = sum(free_kicks_against),
game_uncontested = sum(uncontested_possessions),
game_cont_marks = sum(contested_marks),
game_marks_50 = sum(marks_inside_fifty),
game_hitouts = sum(hitouts),
game_tackles = sum(tackles),
game_tack_ins_fifty = sum(tackles_inside_fifty),
game_rebounds = sum(rebounds),
game_cont_possessions = sum(contested_possessions),
)
#check for NANs
which(is.na(stats_grouped_2021))
colnames(stats_grouped_2021)[colSums(is.na(stats_grouped_2021)) > 0]
########################################################################################################
#feature engineering
########################################################################################################
stats_grouped_2021$pct_mks_in_50 <- stats_grouped_2021$game_marks_50 / stats_grouped_2021$game_marks
stats_grouped_2021$pct_cont_marks <- stats_grouped_2021$game_cont_marks / stats_grouped_2021$game_marks
stats_grouped_2021$ins_times_50s <- stats_grouped_2021$game_ins * stats_grouped_2021$game_marks_50
stats_grouped_2021$rebound_ins_comb <- stats_grouped_2021$game_rebounds * stats_grouped_2021$game_ins
#########################################################################################################
#run models on 2021 data
#########################################################################################################
train_preds_rf_2021 <- data.frame(predict(rf_gridsearch, newdata = stats_grouped_2021[,-c(1:3)]))
colnames(train_preds_rf_2021) <- 'preds_rf'
train_preds_gbm_2021 <- data.frame(predict(gbm_model, newdata = stats_grouped_2021[,-c(1:3)]))
colnames(train_preds_gbm_2021) <- 'preds_gbm'
train_preds_xboost_2021 <- data.frame(predict(xboost_model, newdata = stats_grouped_2021[,-c(1:3)]))
colnames(train_preds_xboost_2021) <- 'preds_xboost'
#lm ensemble
ensemble_df_2021 <- bind_cols(stats_grouped_2021[c(1:3)],train_preds_rf_2021, train_preds_gbm_2021, train_preds_xboost_2021)
ensemble_df_2021$ensemble_preds <- predict(ensemble_model, newdata = ensemble_df_2021[,-c(1:3)])
############################################################################################################
#initial lambda per team 2022
############################################################################################################
lambda_initial_2022 <- ensemble_df_2021 %>%
dplyr :: group_by(player_team) %>%
dplyr :: summarise(mean_shots = mean(ensemble_preds))
############################################################################################################
#combine above work to get complete view of team shots / HFA / defense
#DFs needed <- HFA, HFA_home, HFA_away, def_stats_2021, travel_coeff
############################################################################################################
############################################################################################################
#pts per shot by venue and weather
############################################################################################################
pts_per_shot <- fry_stats %>% group_by(match_id) %>%
summarize(total_shots = sum(shots_at_goal),
total_points = sum(goals * 6 + behinds),
points_per_kick = total_points / total_shots)
pts_per_shot <- fry_stats %>% group_by(match_id) %>%
summarize(total_shots = sum(shots_at_goal),
total_points = sum(goals * 6 + behinds),
points_per_kick = total_points / total_shots)
View(pts_per_shot)
install_github("ropensci/bomrang", build_vignettes = TRUE)
if (!require("remotes")) {
install.packages("remotes", repos = "http://cran.rstudio.com/")
library("remotes")
}
install_github("ropensci/bomrang", build_vignettes = TRUE)
install.packages("GSODR")
install.packages("devtools")
library("devtools")
install_github("weatherData", "Ram-N")
View(travel_effect)
View(travel_shots)
View(aus_cities)
city_latlon <- aus_cities[1,2:3]
city_latlon
library(bomrang)
get_historical_weather(latlon = city_latlon, type = 'min')
city_latlon[1]
get_historical_weather(latlon = c(city_latlon[1], city_latlon[2]), type = 'min')
city_latlon <- c(aus_cities[1,2], aus_cities[1,3])
city_latlon
get_historical_weather(latlon = city_latlon, type = 'min')
city_latlon <- c(aus_cities[8,2], aus_cities[8,3])
get_historical_weather(latlon = city_latlon, type = 'min')
city_latlon <- c(aus_cities[8,3], aus_cities[8,2])
get_historical_weather(latlon = city_latlon, type = 'min')
city_latlon <- c(aus_cities[1,3], aus_cities[1,2])
get_historical_weather(latlon = city_latlon, type = 'min')
remove.packages("bomrang")
install.packages("weatherAUS")
install.packages("ncdf4")
install.packages("C:/Users/ericp/Downloads/AWAPer_0.1.46.tar.gz", repos = NULL, type = "source")
install.packages(c("utils", "sp", "raster", "chron", "maptools", "Evapotranspiration","devtools","zoo", "methods", "xts"))
install.packages(c("utils", "sp", "raster", "chron", "maptools", "Evapotranspiration", "devtools", "zoo", "methods", "xts"))
install.packages(c("utils", "sp", "raster", "chron", "maptools", "Evapotranspiration", "devtools", "zoo", "methods", "xts"))
install.packages("C:/Users/ericp/Downloads/AWAPer_0.1.46.tar.gz", repos = NULL, type = "source")
library(AWAPer)
URLs <- getURLs()
View(URLs)
aus_weather <- makeNetCDF_file(
ncdfFilename = file.path(getwd(), "AWAP.nc"),
ncdfSolarFilename = file.path(getwd(), "AWAP_solar.nc"),
updateFrom = as.Date("2016-01-01", "%Y-%m-%d"),
updateTo = as.Date(Sys.Date() - 1, "%Y-%m-%d"),
workingFolder = getwd(),
keepFiles = FALSE,
compressionLevel = 5,
urlPrecip = getURLs()$precip,
urlTmin = getURLs()$Tmin,
urlTmax = getURLs()$Tmax,
urlVprp = getURLs()$vprp,
urlSolarrad = getURLs()$solarrad
)
aus_weather <- makeNetCDF_file(
ncdfFilename = file.path(getwd(), "AWAP.nc"),
ncdfSolarFilename = file.path(getwd(), "AWAP_solar.nc"),
updateFrom = as.Date("2016-01-01", "%Y-%m-%d"),
updateTo = as.Date(Sys.Date() - 1, "%Y-%m-%d"),
workingFolder = getwd(),
keepFiles = FALSE,
compressionLevel = 5,
urlPrecip = getURLs()$precip,
urlTmin = getURLs()$Tmin,
urlTmax = getURLs()$Tmax,
urlVprp = getURLs()$vprp,
urlSolarrad = getURLs()$solarrad
)
aus_weather <- makeNetCDF_file(
ncdfFilename = file.path(getwd(), "AWAP.nc"),
ncdfSolarFilename = file.path(getwd(), "AWAP_solar.nc"),
updateFrom = as.Date("2016-01-01", "%Y-%m-%d"),
updateTo = as.Date(Sys.Date() - 1, "%Y-%m-%d"),
workingFolder = getwd(),
keepFiles = FALSE,
compressionLevel = 5,
urlPrecip = getURLs()$precip,
urlTmin = getURLs()$Tmin,
urlTmax = getURLs()$Tmax,
urlVprp = getURLs()$vprp,
urlSolarrad = getURLs()$solarrad
)
install.packages("devtools")
library("devtools")
install_github("Ram-N/weatherData")
install.packages("weathermetrics")
install.packages(c("colorspace", "fansi", "utf8", "zip"))
install.packages("devtools")
library("devtools")
install_github("Ram-N/weatherData")
install.packages("devtools")
detach("package:devtools", unload = TRUE)
install.packages("devtools")
library("devtools")
install_github("Ram-N/weatherData")
sys.getenv('API_KEY')
Sys.getenv('API_KEY')
API_KEY
theODDS_key
Sys.setenv(theODDS_key = 'odds-history?apiKey=a9774f2d806c24fdec47030fa4b44156&')
theODDS_key
Sys.getenv()
theODDS_key
theODDS_base <- 'https://api.the-odds-api.com/v4/sports/'
theODDS_sport  <- 'aussierules_afl/'
theODDS_region <- 'regions=au'
theODDS_markets <- '&markets=spreads,h2h,totals&oddsFormat=decimal&'
start_date <- as.Date('2023-05-04')
theODDS_date <- paste0('date=',start_date,'T00:00:00Z')
start_date <- as.Date('2022-03-10')
odds_df <- data.frame()
y <- 1
theODDS_fullAPI <- paste0(theODDS_base, theODDS_sport, theODDS_key, theODDS_region, theODDS_markets, theODDS_date)
Sys.getenv('theODDS_key')
API_KEY <- Sys.getenv('API_KEY')
Sys.getenv('API_KEY')
API_KEY <- Sys.getenv('API_KEY')
theODDS_key <- Sys.getenv('theODDS_key')
theODDS_key
API_KEY <- Sys.getenv('API_KEY')
Sys.getenv(c('theODDS_key','API_KEY'))
Sys.setenv(API_KEY = '?key=GE5SPM4SQF4UBGD63ZGEMU4KJ')
Sys.getenv(c('theODDS_key','API_KEY'))
library(usethis)
library(hoopR)
kp_hca()
try(kp_hca())
usethis::edit_r_environ()
login(user_email = Sys.getenv("ericpaulpeterson@gmail.com"), user_pw = Sys.getenv("V@nderbilt2014!"))
?login
??login
library(fitzRoy)
x <- fetch_fixture_alf(season = 2023)
x <- fetch_fixture_afl(season = 2023)
View(x)
s2023 <- season_pull(2023,2023)
library(dplyr)
s2023 <- season_pull(2023,2023)
View(s2023)
rm(x)
rm(s2023)
#college basketball
setwd("/Users/ericp/OneDrive/Documents/GitHub/basketball model")
library(usethis)
library(hoopR)
tictoc::tic()
progressr::with_progress({
mbb_pbp <-  hoopR::load_mbb_pbp()
})
tictoc::toc()
View(mbb_pbp)
#########################################################################################################
#install required libraries
#########################################################################################################
setwd("/Users/ericp/OneDrive/Documents/GitHub/afl-model")
library(fitzRoy)
library(dplyr)
library(lookup)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(lookup)
library(bayestestR)
library(xgboost)
library(gbm)
library(lubridate)
library(jsonlite)
library(tidyr)
#################################################################################################################
#Odds API
#################################################################################################################
theODDS_base <- 'https://api.the-odds-api.com/v4/sports/'
theODDS_sport  <- 'aussierules_afl/'
theODDS_key <- Sys.getenv('theODDS_key')
theODDS_region <- 'regions=au&'
#theODDS_markets <- '&markets=spreads,h2h,totals&oddsFormat=decimal&'
start_date <- as.Date('2023-03-10')
theODDS_date <- paste0('date=',start_date,'T00:00:00Z')
#pull API data
odds_df <- data.frame()
y <- 1
while(start_date <= as.Date('2023-05-13')){
theODDS_fullAPI <- paste0(theODDS_base, theODDS_sport, theODDS_key, theODDS_region, theODDS_date)
pull_API <- fromJSON(theODDS_fullAPI)
afl_odds <- pull_API$data
odds_df <- rbind(odds_df, afl_odds)
start_date <- start_date + 1
theODDS_date <- paste0('date=',start_date,'T00:00:00Z')
print(y)
y <- y+1
}
##########################################################################################################
#fetch historical odds to backtest
##########################################################################################################
afl_historical_odds <- read.csv("~/GitHub/afl-model/afl_historical_odds.csv")
colnames(afl_historical_odds) <- unlist(afl_historical_odds[1, ])
afl_historical_odds <- tail(afl_historical_odds, -1)
afl_historical_odds$Date <- as.Date(dmy(afl_historical_odds$Date))
afl_historical_odds$season <- as.Date(afl_historical_odds$Date)
afl_historical_odds$season <- format(afl_historical_odds$season, format = '%Y')
afl_historical_odds_join <- afl_historical_odds %>% filter(season > 2021)
afl_historical_odds_join <- afl_historical_odds_join %>% select(-c(season))
#change Home.Team/Away.Team colnames to home_team/away_team
colnames(afl_historical_odds_join)[1] <- 'date'
colnames(afl_historical_odds_join)[3] <- 'home_team'
colnames(afl_historical_odds_join)[4] <- 'away_team'
colnames(afl_historical_odds)[3] <- 'home_team'
colnames(afl_historical_odds)[4] <- 'away_team'
#change team names where required
afl_historical_odds_join$home_team <- ifelse(afl_historical_odds_join$home_team == 'GWS Giants', 'Greater Western Sydney', afl_historical_odds_join$home_team)
afl_historical_odds_join$home_team <- ifelse(afl_historical_odds_join$home_team == 'Brisbane', 'Brisbane Lions', afl_historical_odds_join$home_team)
afl_historical_odds_join$away_team <- ifelse(afl_historical_odds_join$away_team == 'GWS Giants', 'Greater Western Sydney', afl_historical_odds_join$away_team)
afl_historical_odds_join$away_team <- ifelse(afl_historical_odds_join$away_team == 'Brisbane', 'Brisbane Lions', afl_historical_odds_join$away_team)
##########################################################################################################
#pull game statistics for five seasons
##########################################################################################################
season_pull <- function(x,y){
df_season <- data.frame()
if(!is.numeric(x)|!is.numeric(y)){return('x or y is not numeric.')}
rng <- seq(x,y,1)
for(i in 1:length(rng)){
fry_stats <- fetch_player_stats_fryzigg(season = rng[i])
df_season <- bind_rows(df_season, fry_stats)
print(i)
}
df_season <- df_season %>% mutate(season = as.POSIXct(match_date, format = '%Y-%m-%d'))
df_season$season <- format(df_season$season, format = '%Y')
#create a column for who the opposition was in every game
df_season$opposition <- NA
#will allow me to see what teams give up lots of shots
for(i in 1: nrow(df_season)) {
if(df_season$player_team[i] == df_season$match_home_team[i]){
df_season$opposition[i] <- df_season$match_away_team[i]
} else {
df_season$opposition[i] <- df_season$match_home_team[i]
}
}
return(df_season)
}
x <- season_pull(2023,2023)
View(x)
install.packages("nflverse")
library(nflverse)
options(nflreadr.verbose = FALSE)
library(usethis)
usethis::edit_r_profile()
