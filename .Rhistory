caret::RMSE(final_def$total_effective_pts, final_def$predicted_points_conceded)
wts <- c(17:1, by = -1)
wts
wts <- c(17:1)
wts
weighted_avg_off <- final_off %>%
group_by(posteam) %>%
summarise(wt_avg_off = weighted.mean(predicted_points, wts, na.rm = TRUE))
View(final_off)
game_counts <- final_off %>%
group_by(posteam) %>%
mutate(total_games = n())
View(game_counts)
game_counts <- final_off %>%
group_by(posteam) %>%
summarise(total_games = n())
View(game_counts)
buf_off <- final_off %>% filter(posteam == 'BUF') %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
View(buf_off)
buf_off <- final_off %>% filter(posteam == 'BUF') %>%
group_by(posteam) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
View(buf_off)
add_game <- function(df,pos_def, team){
out <- df %>% filter(posteam == !!sym(team)) %>%
group_by(team) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
}
library(FRAPO)
add_game <- function(df,team){
out <- df %>% filter(posteam == !!sym(team)) %>%
group_by(team) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
}
buf_off <- add_game(final_off, 'BUF')
buf_off <- final_off %>%
filter(posteam == 'BUF') %>%
group_by(team) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
final_off$posteam
buf_off <- final_off %>%
filter(posteam == 'BUF') %>%
group_by(team) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
buf_off <- final_off %>% filter(posteam == 'BUF') %>%
group_by(team) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
buf_off <- final_off %>% filter(posteam == 'BUF') %>%
group_by(posteam) %>%
summarise(score_mean = mean(predicted_points),
eff_mean = mean(total_effective_pts))
View(buf_off)
buff_off <- final_off %>%
filter(posteam == 'BUF') %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points))
View(final_off)
buff_off <- final_off %>%
filter(posteam == 'BUF') %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points))
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points))
View(buff_off)
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
filter(posteam == 'BUF')
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'BUF')
View(buff_off)
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded))
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'BUF')
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded))
cin_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam = 'CIN')
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'BUF')
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded))
cin_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'CIN')
cin_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded))
off_add <- rbind(buff_off, cin_off)
def_add <- rbind(buff_def, cin_def)
View(def_add)
View(def_add)
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'BUF')
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(posteam == 'BUF')
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'BUF')
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(defteam == 'BUF')
cin_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'CIN')
cin_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(defteam == 'CIN')
off_add <- rbind(buff_off, cin_off)
def_add <- rbind(buff_def, cin_def)
View(def_add)
off_add$game_id <- '2022_17_BUF_CIN'
def_add$game_id <- '2022_17_BUF_CIN'
View(final_off)
View(final_off)
View(off_add)
colnames(off_add) <- c('posteam', 'total_effective_pts', 'predicted_points','game_id')
colnames(def_add) <- c('defteam', 'total_effective_pts', 'predicted_points_conceded', 'game_id')
common_cols <- intersect(colnames(off_add), colnames(final_off))
final_off <- rbind(
subset(final_off, select = common_cols),
subset(off_add, select = common_cols)
)
common_cols <- intersect(colnames(def_add), colnames(final_def))
final_off <- rbind(
subset(final_def, select = common_cols),
subset(def_add, select = common_cols)
)
wts <- c(17:1)
game_counts <- final_off %>%
group_by(posteam) %>%
summarise(total_games = n())
game_counts <- final_off %>%
dplyr::group_by(posteam) %>%
dplyr::summarise(total_games = n())
library(caret)
final_off <- total_offensive_efficiency_2022 %>%
select(1,6,21)
final_def <- total_defensive_efficiency_2022 %>%
select(1,6,21)
ensemble_eff_2022 <- prep_df(total_offensive_efficiency_2022, c(1:7,12,15:20,21:24))
ensemble_def_2022 <- prep_df(total_defensive_efficiency_2022, c(1:7,12,15:20,21:24))
ensemble_off_2022 <- as.h2o(ensemble_eff_2022[[3]])
ensemble_def_2022 <- as.h2o(ensemble_def_2022[[3]])
#set target and predictors
preds_off_2022 <- h2o.predict(off_eff_ensemble, newdata = ensemble_off_2022)
preds_off_df <- as.data.frame(preds_off_2022)
preds_def_2022 <- h2o.predict(def_eff_ensemble, newdata = ensemble_def_2022)
preds_def_df <- as.data.frame(preds_def_2022)
final_off <- cbind(final_off, preds_off_df)
final_def <- cbind(final_def, preds_def_df)
colnames(final_off)[4] <- 'predicted_points'
colnames(final_def)[4] <- 'predicted_points_conceded'
caret::RMSE(final_off$total_effective_pts, final_off$predicted_points)
caret::RMSE(final_def$total_effective_pts, final_def$predicted_points_conceded)
#################################################################################################################
#group by teams
#################################################################################################################
library(FRAPO)
buff_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'BUF')
buff_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(defteam == 'BUF')
cin_off <- final_off %>%
group_by(posteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points)) %>%
dplyr::filter(posteam == 'CIN')
cin_def <- final_def %>%
group_by(defteam) %>%
summarise(mean_eff = mean(total_effective_pts),
mean_preds = mean(predicted_points_conceded)) %>%
dplyr::filter(defteam == 'CIN')
off_add <- rbind(buff_off, cin_off)
def_add <- rbind(buff_def, cin_def)
off_add$game_id <- '2022_17_BUF_CIN'
def_add$game_id <- '2022_17_BUF_CIN'
colnames(off_add) <- c('posteam', 'total_effective_pts', 'predicted_points','game_id')
colnames(def_add) <- c('defteam', 'total_effective_pts', 'predicted_points_conceded', 'game_id')
common_cols <- intersect(colnames(off_add), colnames(final_off))
final_off <- rbind(
subset(final_off, select = common_cols),
subset(off_add, select = common_cols)
)
common_cols <- intersect(colnames(def_add), colnames(final_def))
final_def <- rbind(
subset(final_def, select = common_cols),
subset(def_add, select = common_cols)
)
game_counts <- final_off %>%
dplyr::group_by(posteam) %>%
dplyr::summarise(total_games = n())
View(game_counts)
wts <- c(17:1)
weighted_avg <- function(df, pos_def){
out <- df %>%
group_by(pos_def) %>%
summarise(wt_avg_off = weighted.mean(predicted_points, wts, na.rm = TRUE))
return(out)
}
wts <- c(17:1)
weighted_avg <- function(df, pos_def){
out <- df %>%
group_by(!!sym(pos_def)) %>%
summarise(wt_avg_off = weighted.mean(predicted_points, wts, na.rm = TRUE))
return(out)
}
weighted_offense <- weighted_avg(final_off, 'posteam')
View(weighted_offense)
weighted_defense <- weighted_avg(final_def, 'defteam')
weighted_avg <- function(df, pos_def, col){
out <- df %>%
group_by(!!sym(pos_def)) %>%
summarise(wt_avg_pts = weighted.mean(!!sym(col), wts, na.rm = TRUE))
return(out)
}
weighted_offense <- weighted_avg(final_off, 'posteam','predicted_points')
View(weighted_offense)
weighted_defense <- weighted_avg(final_def, 'defteam', 'predicted_points_conceded')
View(weighted_defense)
#########################################################################################################
#install required libraries
#########################################################################################################
setwd("/Users/ericp/OneDrive/Documents/GitHub/afl-model")
library(fitzRoy)
library(dplyr)
library(lookup)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(lookup)
library(bayestestR)
library(xgboost)
library(gbm)
library(lubridate)
library(jsonlite)
library(tidyr)
####################################################################################################
#ideas for 2024
####################################################################################################
#boost / weight stats by position
#player level data to adjust for injuries
#determine lambda 3 for bivariate model correlation
#weight recent performance over past?
#age curve for teams.
#add variance to pts-per-shot by making that a RV.
#################################################################################################################
#Odds API
#################################################################################################################
##########################################################################################################
#pull game statistics for five seasons
##########################################################################################################
season_pull <- function(x,y){
df_season <- data.frame()
if(!is.numeric(x)|!is.numeric(y)){return('x or y is not numeric.')}
rng <- seq(x,y,1)
for(i in 1:length(rng)){
fry_stats <- fetch_player_stats_fryzigg(season = rng[i])
df_season <- bind_rows(df_season, fry_stats)
print(i)
}
df_season <- df_season %>% mutate(season = as.POSIXct(match_date, format = '%Y-%m-%d'))
df_season$season <- format(df_season$season, format = '%Y')
#create a column for who the opposition was in every game
df_season$opposition <- NA
#will allow me to see what teams give up lots of shots
for(i in 1: nrow(df_season)) {
if(df_season$player_team[i] == df_season$match_home_team[i]){
df_season$opposition[i] <- df_season$match_away_team[i]
} else {
df_season$opposition[i] <- df_season$match_home_team[i]
}
}
return(df_season)
}
#pull stats from 2016-2020 to build initial model
fry_stats <- season_pull(2016,2020)
########################################################################################################
#create group stats
########################################################################################################
#create function to group offensive stats
stats_create <- function(df) {
df2 <- df %>% group_by(match_id, player_team) %>%
summarise(game_shots = sum(shots_at_goal),
game_ins = sum(inside_fifties),
game_kicks = sum(kicks),
game_marks = sum(marks),
game_handballs = sum(handballs),
game_eff_disposals = sum(effective_disposals),
game_disposals = sum(disposals),
game_clearances = sum(clearances),
game_FK_for = sum(free_kicks_for),
game_FK_against = sum(free_kicks_against),
game_uncontested = sum(uncontested_possessions),
game_cont_marks = sum(contested_marks),
game_marks_50 = sum(marks_inside_fifty),
game_hitouts = sum(hitouts),
game_tackles = sum(tackles),
game_tack_ins_fifty = sum(tackles_inside_fifty),
game_rebounds = sum(rebounds),
game_cont_possessions = sum(contested_possessions)
)
imp <- colnames(df2)[colSums(is.na(df2)) > 0]
#impute NANs into mean of data
mean_imp <- lapply(df2[,imp], mean, na.rm = TRUE)
df2[,imp][is.na(df2[,imp])] <- as.integer(mean_imp)
#feature engineering
df2$pct_mks_in_50 <- df2$game_marks_50 / df2$game_marks
df2$pct_cont_marks <- df2$game_cont_marks / df2$game_marks
df2$ins_times_50s <- df2$game_ins * df2$game_marks_50
df2$rebound_ins_comb <- df2$game_rebounds * df2$game_ins
return(df2)
}
#create stats_grouped for 2016-2020
stats_grouped <- stats_create(fry_stats)
#check for NANs
which(is.na(stats_grouped))
#########################################################################################################
#check histograms of variables to see if any are skewed
#########################################################################################################
p_shots <- ggplot(data = stats_grouped, aes(x = game_shots)) + geom_histogram(binwidth = 5)
p_ins <- ggplot(data = stats_grouped, aes(x = game_ins)) + geom_histogram(binwidth = 5)
p_kicks <- ggplot(data = stats_grouped, aes(x = game_kicks)) + geom_histogram(binwidth = 5)
p_marks <- ggplot(data = stats_grouped, aes(x = game_marks)) + geom_histogram(binwidth = 5)
p_shots
p_ins
p_kicks
p_marks
#########################################################################################################
#build random forest for game shots
#test and train data
#########################################################################################################
rf_data <- stats_grouped %>% ungroup() %>%
select(-c(1,2))
rf_data$random <- runif(n = nrow(rf_data))
rf_train <- rf_data %>% filter(random <= 0.8)
#########################################################################################################
#install required libraries
#########################################################################################################
setwd("/Users/ericp/OneDrive/Documents/GitHub/afl-model")
library(fitzRoy)
library(dplyr)
library(lookup)
library(ggplot2)
library(stringr)
library(randomForest)
library(caret)
library(lookup)
library(bayestestR)
library(xgboost)
library(gbm)
library(lubridate)
library(jsonlite)
library(tidyr)
##########################################################################################################
#fetch historical odds to backtest
##########################################################################################################
afl_historical_odds <- read.csv("~/GitHub/afl-model/afl_historical_odds.csv")
afl_historical_odds$Date <- as.Date(dmy(afl_historical_odds$Date))
afl_historical_odds$season <- as.Date(afl_historical_odds$Date)
afl_historical_odds$season <- format(afl_historical_odds$season, format = '%Y')
afl_historical_odds_join <- afl_historical_odds %>% filter(season > 2021)
##########################################################################################################
#pull game statistics for five seasons
##########################################################################################################
season_pull <- function(x,y){
df_season <- data.frame()
if(!is.numeric(x)|!is.numeric(y)){return('x or y is not numeric.')}
rng <- seq(x,y,1)
for(i in 1:length(rng)){
fry_stats <- fetch_player_stats_fryzigg(season = rng[i])
df_season <- bind_rows(df_season, fry_stats)
print(i)
}
df_season <- df_season %>% mutate(season = as.POSIXct(match_date, format = '%Y-%m-%d'))
df_season$season <- format(df_season$season, format = '%Y')
#create a column for who the opposition was in every game
df_season$opposition <- NA
#will allow me to see what teams give up lots of shots
for(i in 1: nrow(df_season)) {
if(df_season$player_team[i] == df_season$match_home_team[i]){
df_season$opposition[i] <- df_season$match_away_team[i]
} else {
df_season$opposition[i] <- df_season$match_home_team[i]
}
}
return(df_season)
}
#pull stats from 2016-2020 to build initial model
fry_stats <- season_pull(2016,2020)
########################################################################################################
#create group stats
########################################################################################################
#create function to group offensive stats
stats_create <- function(df) {
df2 <- df %>% group_by(match_id, player_team) %>%
summarise(game_shots = sum(shots_at_goal),
game_ins = sum(inside_fifties),
game_kicks = sum(kicks),
game_marks = sum(marks),
game_handballs = sum(handballs),
game_eff_disposals = sum(effective_disposals),
game_disposals = sum(disposals),
game_clearances = sum(clearances),
game_FK_for = sum(free_kicks_for),
game_FK_against = sum(free_kicks_against),
game_uncontested = sum(uncontested_possessions),
game_cont_marks = sum(contested_marks),
game_marks_50 = sum(marks_inside_fifty),
game_hitouts = sum(hitouts),
game_tackles = sum(tackles),
game_tack_ins_fifty = sum(tackles_inside_fifty),
game_rebounds = sum(rebounds),
game_cont_possessions = sum(contested_possessions)
)
imp <- colnames(df2)[colSums(is.na(df2)) > 0]
#impute NANs into mean of data
mean_imp <- lapply(df2[,imp], mean, na.rm = TRUE)
df2[,imp][is.na(df2[,imp])] <- as.integer(mean_imp)
#feature engineering
df2$pct_mks_in_50 <- df2$game_marks_50 / df2$game_marks
df2$pct_cont_marks <- df2$game_cont_marks / df2$game_marks
df2$ins_times_50s <- df2$game_ins * df2$game_marks_50
df2$rebound_ins_comb <- df2$game_rebounds * df2$game_ins
return(df2)
}
#create stats_grouped for 2016-2020
stats_grouped <- stats_create(fry_stats)
#check for NANs
which(is.na(stats_grouped))
#########################################################################################################
#check histograms of variables to see if any are skewed
#########################################################################################################
p_shots <- ggplot(data = stats_grouped, aes(x = game_shots)) + geom_histogram(binwidth = 5)
p_ins <- ggplot(data = stats_grouped, aes(x = game_ins)) + geom_histogram(binwidth = 5)
p_kicks <- ggplot(data = stats_grouped, aes(x = game_kicks)) + geom_histogram(binwidth = 5)
p_marks <- ggplot(data = stats_grouped, aes(x = game_marks)) + geom_histogram(binwidth = 5)
p_shots
p_ins
p_kicks
p_marks
#########################################################################################################
#build random forest for game shots
#test and train data
#########################################################################################################
rf_data <- stats_grouped %>% ungroup() %>%
select(-c(1,2))
rf_data$random <- runif(n = nrow(rf_data))
rf_train <- rf_data %>% filter(random <= 0.8)
#########################################################################################################
#build random forest for game shots
#test and train data
#########################################################################################################
rf_data <- stats_grouped %>% ungroup() %>%
select(-c(1,2))
rf_data$random <- runif(n = nrow(rf_data))
rf_train <- rf_data %>% filter(random <= 0.8)
